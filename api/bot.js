// üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏
import { google } from 'googleapis';

// üîë –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–µ–Ω –æ—Ç @BotFather)
const TOKEN = "7991590846:AAHp6H7VW_dPhH3tf_zAjTj8aQSCYZcm6iU";

// üëë –°–ø–∏—Å–æ–∫ chat_id –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–Ω–∏ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏)
const ADMIN_CHAT_IDS = [935264202];

// üìä ID –≤–∞—à–µ–π Google –¢–∞–±–ª–∏—Ü—ã (–∏–∑ URL  —Ç–∞–±–ª–∏—Ü—ã)
const SPREADSHEET_ID = "1utCG8rmf449THR5g6SHvSK4pp6-nj7UEgSgP4H1_isc";

// üßë‚Äçüíº –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Google (–∫–ª—é—á —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const SERVICE_ACCOUNT = {
  "type": "service_account",
  "project_id": "kaf-471314",
  "private_key_id": "5a6f71bc00b6b29c61642fc35de7d505d34e2dcf", 
  "private_key": process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'), // üîê –ö–ª—é—á –Ω–µ –≤ –∫–æ–¥–µ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ!
  "client_email": "id-22-bot@kaf-471314.iam.gserviceaccount.com",
  "client_id": "118228097079633655651",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/id-22-bot%40kaf-471314.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
};

// üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
export default async function handler(req, res) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã (Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST)
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const { message, callback_query } = req.body;

  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (!message && !callback_query) return res.status(200).json({ ok: true });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (message && message.text) {
    const chatId = message.chat.id;
    const text = message.text;

    // –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    if (text === "/start") {
      const keyboard = {
        inline_keyboard: [
          [{ text: "üéñÔ∏è –í–æ–µ–Ω–Ω—ã–π", callback_query "type_military" }],
          [{ text: "üëî –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π", callback_query "type_civil" }]
        ]
      };
      await sendText(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∏–ø:", keyboard);
      return res.status(200).json({ ok: true });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
  if (callback_query) {
    const chatId = callback_query.message.chat.id;
    const data = callback_query.data;
    const name = callback_query.from.first_name || "–ê–Ω–æ–Ω–∏–º";

    // –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø
    if (data === 'type_military' || data === 'type_civil') {
      const type = data === 'type_military' ? 'military' : 'civil';
      await saveEmployee(chatId, name, type); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
      await sendText(chatId, `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: ${type === 'military' ? '–í–æ–µ–Ω–Ω—ã–π' : '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π'}.`);
      return res.status(200).json({ ok: true });
    }
  }

  res.status(200).json({ ok: true });
}

// üì§ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendText(chatId, text, replyMarkup = null) {
  let url = `https://api.telegram.org/bot${TOKEN}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent(text)}`;
  if (replyMarkup) {
    url += `&reply_markup=${encodeURIComponent(JSON.stringify(replyMarkup))}`;
  }
  await fetch(url, { method: 'GET' });
}

// üíæ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É
async function saveEmployee(chatId, name, type) {
  // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Google —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
  const auth = new google.auth.JWT({
    email: SERVICE_ACCOUNT.client_email,
    key: SERVICE_ACCOUNT.private_key,
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });

  await auth.authorize();

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets API
  const sheets = google.sheets({ version: 'v4', auth });

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ chat_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  const response = await sheets.spreadsheets.values.get({
    spreadsheetId: SPREADSHEET_ID,
    range: 'A:A',
  });

  const values = response.data.values || [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
  for (let i = 0; i < values.length; i++) {
    if (values[i][0] == chatId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø, –µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å
      await sheets.spreadsheets.values.update({
        spreadsheetId: SPREADSHEET_ID,
        range: `C${i + 1}`,
        valueInputOption: 'RAW',
        resource: {
          values: [[type]]
        }
      });
      return;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  await sheets.spreadsheets.values.append({
    spreadsheetId: SPREADSHEET_ID,
    range: 'A:C',
    valueInputOption: 'RAW',
    resource: {
      values: [[chatId, name, type]]
    }
  });
} 
